{"name":"Eventchain","tagline":"","body":"# Eventchain\r\n\r\nEventchain is an **event sourcing** framework for Java. Instead of mutating data in a database, it stores all changes\r\n(events) and causes (commands). This facilitates rapid application development and evolution by mitigating the inability\r\nto predict how future needs will drive data shape requirements as all the causal information is persisted. It also provides a foundation\r\nfor deep analytics, data recovery, audit trails and other associated benefits.\r\n\r\n*This is an early version. That said, it's a rewrite of another\r\nlibrary that has been used in real projects, so a lot was learned and incorporated in this incarnation.*\r\n\r\n## Key benefits\r\n\r\n* Flexibility of data aggregation and representation\r\n* Persistence of causal information\r\n* Succinctly mapped application functionality\r\n* Undo/redo functionality\r\n* Audit trail logging\r\n\r\n## Key features\r\n\r\n* Clean, succinct Command/Event model\r\n* Compact data storage layout\r\n* Using [Disruptor](https://lmax-exchange.github.io/disruptor/) for fast message processing\r\n* Using [CQengine](https://github.com/npgall/cqengine) for fast indexing and querying\r\n* In-memory and on-disk (*coming soon*) storage\r\n* Causality-preserving [Hybrid Logical Clocks](http://www.cse.buffalo.edu/tech-reports/2014-04.pdf)\r\n* Locking synchronization primitive\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}